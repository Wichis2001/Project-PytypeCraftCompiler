
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTleftEQUALUNEQUALleftLESS_THANLESS_THAN_OR_EQUALGREATHER_THANGREATHER_THAN_OR_EQUALleftPLUSMINUSCOMMAleftMULTDIVMODrightPOWrightUMINUSrightINCREMENTDECREMENTleftL_PARENR_PARENAND ANY_TYPE ASSIGN BOOLEAN_TYPE BREAK COLON COMMA COMMENT_LINE COMMENT_MULT CONCAT CONSOLE CONTINUE DECREMENT DIV DOT ELSE EQUAL FALSE FOR FUNCTION FUNC_STRING GREATHER_THAN GREATHER_THAN_OR_EQUAL ID IF INCREMENT INTERFACE LESS_THAN LESS_THAN_OR_EQUAL LET LOG L_BRACE L_BRACKET L_PAREN MINUS MOD MULT NOT NULL_TYPE NUMBER NUMBER_TYPE OF OR PLUS POP POW PUSH RETURN R_BRACE R_BRACKET R_PAREN SEMICOLON STRING STRING_TYPE TRUE UNEQUAL VOID WHILEprogram    :   stmt_list\n    optional_semicolon  :   SEMICOLON\n                        |   \n    \n    stmt_list   :   stmt optional_semicolon\n                |   stmt_list stmt optional_semicolon\n    type_id   :   ID\n    data_type   :   STRING_TYPE\n                |   NUMBER_TYPE\n                |   BOOLEAN_TYPE\n                |   ANY_TYPE\n                |   NULL_TYPE\n                |   type_id\n                |   type_array\n    \n    bracket_list    :   L_BRACKET R_BRACKET\n                    |   bracket_list L_BRACKET R_BRACKET\n    type_array :   data_type bracket_listnull_value :   NULL_TYPEid_value   :   ID\n    boolean_value   :   TRUE\n                    |   FALSE\n    number_value   :   NUMBERstring_value   :   STRING\n    values  :   string_value\n            |   number_value\n            |   boolean_value\n            |   id_value\n            |   null_value\n    \n    atrb    :   ID\n            |   ID COLON data_type\n    \n    atrb_list   :   atrb SEMICOLON\n                |   atrb_list atrb SEMICOLON\n    \n    atrb_expr   :   ID COLON expr\n                |   ID\n    \n    atrb_expr_list  :   atrb_expr\n                    |   atrb_expr_list COMMA atrb_expr comma_prod\n    \n    comma_prod  :   COMMA\n                |   \n    \n    array_expr  :   L_BRACKET expr_list R_BRACKET\n                |   L_BRACKET R_BRACKET\n    interface_stmt :   INTERFACE ID L_BRACE atrb_list R_BRACE\n    assign_interface_list   :   ID\n                            |   assign_interface_list DOT ID \n    \n    interface_assignment    :   ID DOT assign_interface_list ASSIGN expr\n                            |   ID DOT assign_interface_list INCREMENT\n                            |   ID DOT assign_interface_list DECREMENT\n    interface_atrb_value   :   ID DOT assign_interface_list\n    interface_expr  :   L_BRACE atrb_expr_list R_BRACE\n                    |   L_BRACE R_BRACE\n    \n    expr    :   L_PAREN expr R_PAREN\n            |   arith_expr\n            |   logic_expr\n            |   comp_expr\n            |   unary_expr\n            |   values\n            |   func_call\n            |   array_call\n            |   interface_expr\n            |   assign_expr\n            |   array_expr\n            |   concat\n            |   interface_assignment\n            |   interface_atrb_value\n    \n    arith_expr  :   expr PLUS expr\n                |   expr MINUS expr\n                |   expr MULT expr\n                |   expr DIV expr\n                |   expr POW expr\n                |   expr MOD expr\n    \n    logic_expr  :   expr AND expr\n                |   expr OR expr\n    \n    comp_expr   :   expr GREATHER_THAN expr\n                |   expr LESS_THAN expr\n                |   expr EQUAL expr\n                |   expr UNEQUAL expr\n                |   expr GREATHER_THAN_OR_EQUAL expr\n                |   expr LESS_THAN_OR_EQUAL expr\n    \n    unary_expr  :   NOT expr\n                |   MINUS expr %prec UMINUS\n    \n    expr_list   :   expr\n                |   expr_list COMMA expr\n    \n    stmt    :   var_declaration\n            |   func_declaration\n            |   func_call\n            |   assign_expr\n            |   if_stmt\n            |   while_stmt\n            |   for_stmt\n            |   for_of_stmt\n            |   print_stmt\n            |   interface_stmt\n            |   return_stmt\n            |   break_stmt\n            |   continue_stmt\n            |   interface_assignment\n            |   push\n            |   pop\n    \n    untyped_var_declaration :   LET ID\n                            |   LET ID ASSIGN expr\n    \n    typed_var_declaration   :   LET ID COLON data_type\n                            |   LET ID COLON data_type ASSIGN expr\n                            |   LET ID COLON\n    \n    var_declaration :   untyped_var_declaration\n                    |   typed_var_declaration\n    \n    param   :   ID\n            |   ID COLON data_type\n            |   LET ID \n            |   LET ID COLON data_type\n    \n    param_list  :   param\n                |   param_list COMMA param\n    \n    func_declaration    :   FUNCTION ID L_PAREN R_PAREN L_BRACE stmt_list R_BRACE\n                        |   FUNCTION ID L_PAREN param_list R_PAREN L_BRACE stmt_list R_BRACE\n                        |   FUNCTION ID L_PAREN R_PAREN COLON data_type L_BRACE stmt_list R_BRACE\n                        |   FUNCTION ID L_PAREN param_list R_PAREN COLON data_type L_BRACE stmt_list R_BRACE\n                        |   FUNCTION ID L_PAREN R_PAREN COLON VOID L_BRACE stmt_list R_BRACE\n                        |   FUNCTION ID L_PAREN param_list R_PAREN COLON VOID L_BRACE stmt_list R_BRACE\n    param_call :   expr\n    params_call :   param_call\n                |   params_call COMMA param_call\n    \n    func_call   :   ID L_PAREN R_PAREN\n                |   ID L_PAREN params_call R_PAREN\n    \n    locate  :   L_BRACKET expr R_BRACKET\n            |   locate L_BRACKET expr R_BRACKET\n    array_call :   ID locate\n    assign_array    :   ID locate ASSIGN expr\n                    |   ID locate INCREMENT\n                    |   ID locate DECREMENT\n    \n    assign_expr :   ID ASSIGN expr\n                |   ID INCREMENT\n                |   ID DECREMENT\n                |   assign_array\n    \n    if_stmt :   IF conditional_if\n    \n    conditional_if : L_PAREN expr R_PAREN L_BRACE stmt_list R_BRACE\n    \n    conditional_if : L_PAREN expr R_PAREN L_BRACE stmt_list R_BRACE ELSE L_BRACE stmt_list R_BRACE\n    \n    conditional_if : L_PAREN expr R_PAREN L_BRACE stmt_list R_BRACE ELSE IF conditional_if\n    \n    while_stmt  :   WHILE L_PAREN expr R_PAREN L_BRACE stmt_list R_BRACE\n    \n    for_stmt : FOR for_stmt_loop\n    \n    for_stmt_loop   :   L_PAREN expr SEMICOLON expr SEMICOLON assign_expr R_PAREN L_BRACE stmt_list R_BRACE\n    \n    for_stmt_loop   :   L_PAREN var_declaration SEMICOLON expr SEMICOLON assign_expr R_PAREN L_BRACE stmt_list R_BRACE\n    \n    for_of_stmt :   FOR L_PAREN var_declaration OF expr R_PAREN L_BRACE stmt_list R_BRACE\n                |   FOR L_PAREN expr OF expr R_PAREN L_BRACE stmt_list R_BRACE\n    print_stmt :   CONSOLE DOT LOG L_PAREN expr_list R_PAREN\n    return_stmt :   RETURN expr\n                |   RETURN \n    break_stmt    :   BREAKcontinue_stmt    :   CONTINUEconcat :   CONCAT L_PAREN expr_list R_PARENpush   :   ID DOT PUSH L_PAREN expr R_PARENpop    :   ID DOT POP L_PAREN R_PAREN'
    
_lr_action_items = {'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[22,22,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,22,-42,-43,-148,-122,22,22,-40,-146,-16,22,22,-147,22,22,-141,-100,-14,-110,22,22,22,-132,-135,22,22,-15,22,22,-111,22,22,22,22,-112,-114,22,22,22,-139,22,-140,22,-113,-115,22,-134,22,22,-133,-138,-137,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,29,30,31,32,33,34,35,36,38,39,40,41,42,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,90,91,95,96,97,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,123,124,126,130,132,133,134,139,140,141,142,143,144,145,146,148,150,153,154,155,156,157,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,197,200,201,203,204,205,206,212,213,215,219,220,221,224,227,228,230,231,232,233,235,237,238,240,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[23,23,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,37,-130,51,74,-144,-145,83,-3,-4,-2,74,74,-128,-129,91,74,-131,74,74,-136,74,-142,74,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,74,74,-23,-24,-25,-26,-27,-18,128,74,-22,-21,-19,-20,-17,-97,-5,135,-119,-127,-41,74,-125,-126,74,158,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-78,-77,-123,91,-48,-39,74,74,184,198,-120,74,200,74,-44,-45,74,-124,-121,74,74,74,74,74,158,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,128,74,-38,74,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,184,23,184,135,-42,-43,-148,-122,23,23,184,-40,-30,-146,74,-16,23,23,184,184,-147,23,23,257,257,-141,-31,-100,-14,-110,23,23,23,-132,-135,23,23,-15,23,23,-111,23,23,23,23,-112,-114,23,23,23,-139,23,-140,23,-113,-115,23,-134,23,23,-133,-138,-137,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,266,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[25,25,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,25,-42,-43,-148,-122,25,25,-40,-146,-16,25,25,-147,25,25,-141,-100,-14,-110,25,25,25,-132,-135,25,25,-15,25,25,-111,25,25,276,25,25,-112,-114,25,25,25,-139,25,-140,25,-113,-115,25,-134,25,25,-133,-138,-137,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[26,26,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,26,-42,-43,-148,-122,26,26,-40,-146,-16,26,26,-147,26,26,-141,-100,-14,-110,26,26,26,-132,-135,26,26,-15,26,26,-111,26,26,26,26,-112,-114,26,26,26,-139,26,-140,26,-113,-115,26,-134,26,26,-133,-138,-137,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[27,27,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,27,-42,-43,-148,-122,27,27,-40,-146,-16,27,27,-147,27,27,-141,-100,-14,-110,27,27,27,-132,-135,27,27,-15,27,27,-111,27,27,27,27,-112,-114,27,27,27,-139,27,-140,27,-113,-115,27,-134,27,27,-133,-138,-137,]),'CONSOLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[28,28,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,28,-42,-43,-148,-122,28,28,-40,-146,-16,28,28,-147,28,28,-141,-100,-14,-110,28,28,28,-132,-135,28,28,-15,28,28,-111,28,28,28,28,-112,-114,28,28,28,-139,28,-140,28,-113,-115,28,-134,28,28,-133,-138,-137,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[29,29,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,29,-42,-43,-148,-122,29,29,-40,-146,-16,29,29,-147,29,29,-141,-100,-14,-110,29,29,29,-132,-135,29,29,-15,29,29,-111,29,29,29,29,-112,-114,29,29,29,-139,29,-140,29,-113,-115,29,-134,29,29,-133,-138,-137,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[30,30,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,30,-42,-43,-148,-122,30,30,-40,-146,-16,30,30,-147,30,30,-141,-100,-14,-110,30,30,30,-132,-135,30,30,-15,30,30,-111,30,30,30,30,-112,-114,30,30,30,-139,30,-140,30,-113,-115,30,-134,30,30,-133,-138,-137,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[31,31,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,31,-42,-43,-148,-122,31,31,-40,-146,-16,31,31,-147,31,31,-141,-100,-14,-110,31,31,31,-132,-135,31,31,-15,31,31,-111,31,31,31,31,-112,-114,31,31,31,-139,31,-140,31,-113,-115,31,-134,31,31,-133,-138,-137,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[32,32,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,32,-42,-43,-148,-122,32,32,-40,-146,-16,32,32,-147,32,32,-141,-100,-14,-110,32,32,32,-132,-135,32,32,-15,32,32,-111,32,32,32,32,-112,-114,32,32,32,-139,32,-140,32,-113,-115,32,-134,32,32,-133,-138,-137,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,194,197,200,201,203,204,205,206,213,219,221,224,227,231,232,233,238,243,245,246,247,248,249,253,254,255,258,260,261,262,263,264,265,267,269,271,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,],[33,33,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,33,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,139,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,33,139,-42,-43,-148,-122,33,33,-40,-146,-16,33,33,-147,33,33,-141,-100,-14,-110,33,33,33,-132,-135,33,33,-15,33,33,-111,33,33,33,33,-112,-114,33,33,33,-139,33,-140,33,-113,-115,33,-134,33,33,-133,-138,-137,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,200,201,203,204,213,219,221,231,238,243,245,246,253,254,260,263,271,272,277,279,281,282,284,287,288,289,],[0,-1,-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,-42,-43,-148,-122,-40,-146,-16,-147,-141,-100,-14,-110,-132,-135,-15,-111,-112,-114,-139,-140,-113,-115,-134,-133,-138,-137,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,86,90,91,96,97,102,103,121,122,123,126,130,134,140,144,145,148,150,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,200,201,203,204,208,210,213,214,219,221,231,238,239,243,245,246,253,254,260,263,271,272,277,279,281,282,284,287,288,289,],[36,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,36,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-119,-127,-41,-125,-126,154,156,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-28,215,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,-42,-43,-148,-122,235,237,-40,240,-146,-16,-147,-141,-29,-100,-14,-110,-132,-135,-15,-111,-112,-114,-139,-140,-113,-115,-134,-133,-138,-137,]),'R_BRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,34,35,36,40,41,45,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,75,78,79,80,81,82,83,84,86,90,91,96,97,121,122,123,125,126,127,128,130,134,140,144,145,148,150,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,200,201,203,204,213,215,216,217,219,221,224,231,232,233,238,240,241,242,243,245,246,249,253,254,260,261,262,263,267,269,271,272,273,274,277,279,281,282,283,284,285,286,287,288,289,],[-3,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-102,-103,-130,-143,-144,-145,-3,-4,-2,-128,-129,-131,-136,-142,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,126,-22,-21,-19,-20,-17,-97,-5,-119,-127,-41,-125,-126,-78,-77,-123,177,-48,-34,-33,-39,-101,-120,-44,-45,-124,-121,213,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,-42,-43,-148,-122,-40,-30,-37,-32,-146,-16,246,-147,253,254,-141,-31,-36,-35,-100,-14,-110,263,-132,-135,-15,271,272,-111,277,279,-112,-114,281,282,-139,-140,-113,-115,287,-134,288,289,-133,-138,-137,]),'OF':([20,21,24,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,83,86,90,91,96,97,102,103,121,122,123,126,130,134,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,184,185,186,187,188,189,190,191,192,200,201,204,219,221,243,245,260,],[-102,-103,-130,-128,-129,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-97,-119,-127,-41,-125,-126,153,155,-78,-77,-123,-48,-39,-101,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-98,-6,-99,-7,-8,-9,-10,-11,-12,-13,-42,-43,-122,-146,-16,-100,-14,-15,]),'L_PAREN':([23,25,26,27,30,37,38,39,44,46,47,49,53,67,68,74,76,77,93,94,95,98,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,276,],[38,46,47,49,53,85,53,53,53,53,53,53,53,53,53,38,53,132,146,147,53,53,157,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,46,]),'ASSIGN':([23,43,74,83,91,92,123,150,176,184,185,186,187,188,189,190,191,192,200,204,221,245,257,260,],[39,95,39,133,-41,143,95,-121,143,-6,220,-7,-8,-9,-10,-11,-12,-13,-42,-122,-16,-14,39,-15,]),'INCREMENT':([23,43,74,91,92,123,150,176,200,204,257,],[40,96,40,-41,144,96,-121,144,-42,-122,40,]),'DECREMENT':([23,43,74,91,92,123,150,176,200,204,257,],[41,97,41,-41,145,97,-121,145,-42,-122,41,]),'DOT':([23,28,74,91,92,176,200,],[42,50,124,-41,142,142,-42,]),'L_BRACKET':([23,30,38,39,43,44,46,47,49,53,67,68,74,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,132,133,141,143,146,150,153,154,155,156,157,179,181,184,185,186,187,188,189,190,191,192,204,220,221,223,225,239,245,250,252,257,260,],[44,76,76,76,98,76,76,76,76,76,76,76,44,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,98,76,76,76,76,76,-121,76,76,76,76,76,76,76,-6,222,-7,-8,-9,-10,-11,-12,-13,-122,76,244,222,222,222,-14,222,222,44,-15,]),'PLUS':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,106,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,106,106,-41,-125,-126,106,106,106,106,106,-78,106,-123,-48,-39,106,-120,-44,-45,106,106,-121,-63,-64,-65,-66,-67,-68,106,106,106,106,106,106,106,106,-49,-46,-47,-38,106,-42,106,106,-122,106,106,106,106,106,106,-146,106,]),'MINUS':([24,30,38,39,40,41,44,46,47,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,78,79,80,81,82,86,89,90,91,95,96,97,98,99,100,101,103,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,130,131,132,133,140,141,143,144,145,146,148,149,150,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,183,200,201,202,204,207,208,209,210,217,218,219,220,243,],[-130,67,67,67,-128,-129,67,67,67,67,107,67,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,67,67,-23,-24,-25,-26,-27,-18,67,-22,-21,-19,-20,-17,-119,107,107,-41,67,-125,-126,67,107,107,107,107,67,67,67,67,67,67,67,67,67,67,67,67,67,67,107,-78,107,-123,-48,-39,107,67,67,-120,67,67,-44,-45,67,107,107,-121,67,67,67,67,67,-63,-64,-65,-66,-67,-68,107,107,107,107,107,107,107,107,-49,-46,-47,67,-38,67,107,-42,107,107,-122,107,107,107,107,107,107,-146,67,107,]),'MULT':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,108,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,108,108,-41,-125,-126,108,108,108,108,108,-78,108,-123,-48,-39,108,-120,-44,-45,108,108,-121,108,108,-65,-66,-67,-68,108,108,108,108,108,108,108,108,-49,-46,-47,-38,108,-42,108,108,-122,108,108,108,108,108,108,-146,108,]),'DIV':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,109,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,109,109,-41,-125,-126,109,109,109,109,109,-78,109,-123,-48,-39,109,-120,-44,-45,109,109,-121,109,109,-65,-66,-67,-68,109,109,109,109,109,109,109,109,-49,-46,-47,-38,109,-42,109,109,-122,109,109,109,109,109,109,-146,109,]),'POW':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,110,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,110,110,-41,-125,-126,110,110,110,110,110,-78,110,-123,-48,-39,110,-120,-44,-45,110,110,-121,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-49,-46,-47,-38,110,-42,110,110,-122,110,110,110,110,110,110,-146,110,]),'MOD':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,111,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,111,111,-41,-125,-126,111,111,111,111,111,-78,111,-123,-48,-39,111,-120,-44,-45,111,111,-121,111,111,-65,-66,-67,-68,111,111,111,111,111,111,111,111,-49,-46,-47,-38,111,-42,111,111,-122,111,111,111,111,111,111,-146,111,]),'AND':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,112,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,112,112,-41,-125,-126,112,112,112,112,112,-78,-77,-123,-48,-39,112,-120,-44,-45,112,112,-121,-63,-64,-65,-66,-67,-68,-69,112,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,112,-42,112,112,-122,112,112,112,112,112,112,-146,112,]),'OR':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,113,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,113,113,-41,-125,-126,113,113,113,113,113,-78,-77,-123,-48,-39,113,-120,-44,-45,113,113,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,113,-42,113,113,-122,113,113,113,113,113,113,-146,113,]),'GREATHER_THAN':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,114,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,114,114,-41,-125,-126,114,114,114,114,114,-78,114,-123,-48,-39,114,-120,-44,-45,114,114,-121,-63,-64,-65,-66,-67,-68,114,114,-71,-72,114,114,-75,-76,-49,-46,-47,-38,114,-42,114,114,-122,114,114,114,114,114,114,-146,114,]),'LESS_THAN':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,115,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,115,115,-41,-125,-126,115,115,115,115,115,-78,115,-123,-48,-39,115,-120,-44,-45,115,115,-121,-63,-64,-65,-66,-67,-68,115,115,-71,-72,115,115,-75,-76,-49,-46,-47,-38,115,-42,115,115,-122,115,115,115,115,115,115,-146,115,]),'EQUAL':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,116,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,116,116,-41,-125,-126,116,116,116,116,116,-78,116,-123,-48,-39,116,-120,-44,-45,116,116,-121,-63,-64,-65,-66,-67,-68,116,116,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,116,-42,116,116,-122,116,116,116,116,116,116,-146,116,]),'UNEQUAL':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,117,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,117,117,-41,-125,-126,117,117,117,117,117,-78,117,-123,-48,-39,117,-120,-44,-45,117,117,-121,-63,-64,-65,-66,-67,-68,117,117,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,117,-42,117,117,-122,117,117,117,117,117,117,-146,117,]),'GREATHER_THAN_OR_EQUAL':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,118,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,118,118,-41,-125,-126,118,118,118,118,118,-78,118,-123,-48,-39,118,-120,-44,-45,118,118,-121,-63,-64,-65,-66,-67,-68,118,118,-71,-72,118,118,-75,-76,-49,-46,-47,-38,118,-42,118,118,-122,118,118,118,118,118,118,-146,118,]),'LESS_THAN_OR_EQUAL':([24,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,89,90,91,96,97,99,100,101,103,120,121,122,123,126,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,183,200,201,202,204,207,208,209,210,217,218,219,243,],[-130,-128,-129,119,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,119,119,-41,-125,-126,119,119,119,119,119,-78,119,-123,-48,-39,119,-120,-44,-45,119,119,-121,-63,-64,-65,-66,-67,-68,119,119,-71,-72,119,119,-75,-76,-49,-46,-47,-38,119,-42,119,119,-122,119,119,119,119,119,119,-146,119,]),'R_PAREN':([24,38,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,85,86,87,88,89,90,91,96,97,100,101,120,121,122,123,126,130,131,135,137,138,140,144,145,147,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,182,184,186,187,188,189,190,191,192,198,199,200,201,202,204,207,209,211,218,219,221,223,229,245,252,256,259,260,],[-130,86,-128,-129,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,136,-119,140,-117,-116,-127,-41,-125,-126,151,152,175,-78,-77,-123,-48,-39,-79,-104,196,-108,-120,-44,-45,203,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,219,-6,-7,-8,-9,-10,-11,-12,-13,-106,-118,-42,-43,231,-122,234,236,238,-80,-146,-16,-105,-109,-14,-107,268,270,-15,]),'COMMA':([24,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,78,79,80,81,82,86,87,88,89,90,91,96,97,121,122,123,125,126,127,128,129,130,131,135,137,138,140,144,145,148,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,182,184,186,187,188,189,190,191,192,198,199,200,201,204,211,216,217,218,219,221,223,229,241,242,245,252,260,],[-130,-128,-129,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,-22,-21,-19,-20,-17,-119,141,-117,-116,-127,-41,-125,-126,-78,-77,-123,178,-48,-34,-33,181,-39,-79,-104,197,-108,-120,-44,-45,-124,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,181,-6,-7,-8,-9,-10,-11,-12,-13,-106,-118,-42,-43,-122,181,241,-32,-80,-146,-16,-105,-109,-36,-35,-14,-107,-15,]),'R_BRACKET':([24,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,76,78,79,80,81,82,86,90,91,96,97,99,121,122,123,126,129,130,131,140,144,145,148,149,150,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,200,201,204,218,219,222,244,],[-130,-128,-129,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-23,-24,-25,-26,-27,-18,130,-22,-21,-19,-20,-17,-119,-127,-41,-125,-126,150,-78,-77,-123,-48,180,-39,-79,-120,-44,-45,-124,204,-121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-49,-46,-47,-38,-42,-43,-122,-80,-146,245,260,]),'NOT':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'L_BRACE':([30,38,39,44,46,47,49,51,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,136,141,143,146,151,152,153,154,155,156,157,179,181,184,186,187,188,189,190,191,192,196,220,221,225,226,234,236,245,250,251,260,266,268,270,],[75,75,75,75,75,75,75,105,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,194,75,75,75,205,206,75,75,75,75,75,75,75,-6,-7,-8,-9,-10,-11,-12,-13,227,75,-16,247,248,255,258,-14,264,265,-15,275,278,280,]),'CONCAT':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'STRING':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'NUMBER':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'TRUE':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'FALSE':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'NULL_TYPE':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,134,141,143,146,153,154,155,156,157,179,181,193,195,212,220,228,230,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,190,82,82,82,82,82,82,82,82,82,82,190,190,190,82,190,190,]),'PUSH':([42,],[93,]),'POP':([42,],[94,]),'LOG':([50,],[104,]),'COLON':([83,128,135,136,158,196,198,],[134,179,193,195,212,228,230,]),'STRING_TYPE':([134,193,195,212,228,230,],[186,186,186,186,186,186,]),'NUMBER_TYPE':([134,193,195,212,228,230,],[187,187,187,187,187,187,]),'BOOLEAN_TYPE':([134,193,195,212,228,230,],[188,188,188,188,188,188,]),'ANY_TYPE':([134,193,195,212,228,230,],[189,189,189,189,189,189,]),'VOID':([195,228,],[226,251,]),'ELSE':([253,],[266,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,194,205,206,227,247,248,255,258,264,265,275,278,280,],[2,224,232,233,249,261,262,267,269,273,274,283,285,286,]),'stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[3,34,3,3,3,34,3,34,34,3,3,34,3,3,34,34,3,3,34,34,34,34,3,3,3,34,34,34,]),'var_declaration':([0,2,49,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[4,4,102,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'func_declaration':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'func_call':([0,2,30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,194,205,206,220,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[6,6,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,6,6,6,59,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assign_expr':([0,2,30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,194,205,206,220,224,227,232,233,235,237,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[7,7,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,7,7,7,62,7,7,7,7,256,259,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'if_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'while_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'for_of_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'print_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'interface_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'break_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'continue_stmt':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'interface_assignment':([0,2,30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,194,205,206,220,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[17,17,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,17,17,17,65,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'push':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'pop':([0,2,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'untyped_var_declaration':([0,2,49,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'typed_var_declaration':([0,2,49,194,205,206,224,227,232,233,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'assign_array':([0,2,30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,194,205,206,220,224,227,232,233,235,237,247,248,249,255,258,261,262,264,265,267,269,273,274,275,278,280,283,285,286,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'optional_semicolon':([3,34,],[35,84,]),'locate':([23,74,257,],[43,123,43,]),'conditional_if':([25,276,],[45,284,]),'for_stmt_loop':([27,],[48,]),'expr':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[52,89,90,99,100,101,103,120,121,122,131,148,149,161,162,163,164,165,166,167,168,169,170,171,172,173,174,131,183,89,201,202,207,208,209,210,131,217,218,243,]),'arith_expr':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'logic_expr':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'comp_expr':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'unary_expr':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'values':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'array_call':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'interface_expr':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'array_expr':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'concat':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'interface_atrb_value':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'string_value':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'number_value':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'boolean_value':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'id_value':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'null_value':([30,38,39,44,46,47,49,53,67,68,76,95,98,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,133,141,143,146,153,154,155,156,157,179,181,220,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'params_call':([38,],[87,]),'param_call':([38,141,],[88,199,]),'assign_interface_list':([42,124,],[92,176,]),'atrb_expr_list':([75,],[125,]),'atrb_expr':([75,178,],[127,216,]),'expr_list':([76,132,157,],[129,182,211,]),'param_list':([85,],[137,]),'param':([85,197,],[138,229,]),'atrb_list':([105,],[159,]),'atrb':([105,159,],[160,214,]),'data_type':([134,193,195,212,228,230,],[185,223,225,239,250,252,]),'type_id':([134,193,195,212,228,230,],[191,191,191,191,191,191,]),'type_array':([134,193,195,212,228,230,],[192,192,192,192,192,192,]),'bracket_list':([185,223,225,239,250,252,],[221,221,221,221,221,221,]),'comma_prod':([216,],[242,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser_analyzer.py',65),
  ('optional_semicolon -> SEMICOLON','optional_semicolon',1,'p_optional_semicolon','parser_analyzer.py',70),
  ('optional_semicolon -> <empty>','optional_semicolon',0,'p_optional_semicolon','parser_analyzer.py',71),
  ('stmt_list -> stmt optional_semicolon','stmt_list',2,'p_stmt_list','parser_analyzer.py',77),
  ('stmt_list -> stmt_list stmt optional_semicolon','stmt_list',3,'p_stmt_list','parser_analyzer.py',78),
  ('type_id -> ID','type_id',1,'p_type_id','parser_analyzer.py',87),
  ('data_type -> STRING_TYPE','data_type',1,'p_data_type','parser_analyzer.py',92),
  ('data_type -> NUMBER_TYPE','data_type',1,'p_data_type','parser_analyzer.py',93),
  ('data_type -> BOOLEAN_TYPE','data_type',1,'p_data_type','parser_analyzer.py',94),
  ('data_type -> ANY_TYPE','data_type',1,'p_data_type','parser_analyzer.py',95),
  ('data_type -> NULL_TYPE','data_type',1,'p_data_type','parser_analyzer.py',96),
  ('data_type -> type_id','data_type',1,'p_data_type','parser_analyzer.py',97),
  ('data_type -> type_array','data_type',1,'p_data_type','parser_analyzer.py',98),
  ('bracket_list -> L_BRACKET R_BRACKET','bracket_list',2,'p_bracket_list','parser_analyzer.py',104),
  ('bracket_list -> bracket_list L_BRACKET R_BRACKET','bracket_list',3,'p_bracket_list','parser_analyzer.py',105),
  ('type_array -> data_type bracket_list','type_array',2,'p_type_array','parser_analyzer.py',114),
  ('null_value -> NULL_TYPE','null_value',1,'p_null_value','parser_analyzer.py',119),
  ('id_value -> ID','id_value',1,'p_id_value','parser_analyzer.py',123),
  ('boolean_value -> TRUE','boolean_value',1,'p_boolean_value','parser_analyzer.py',128),
  ('boolean_value -> FALSE','boolean_value',1,'p_boolean_value','parser_analyzer.py',129),
  ('number_value -> NUMBER','number_value',1,'p_number_value','parser_analyzer.py',135),
  ('string_value -> STRING','string_value',1,'p_string_value','parser_analyzer.py',139),
  ('values -> string_value','values',1,'p_values','parser_analyzer.py',144),
  ('values -> number_value','values',1,'p_values','parser_analyzer.py',145),
  ('values -> boolean_value','values',1,'p_values','parser_analyzer.py',146),
  ('values -> id_value','values',1,'p_values','parser_analyzer.py',147),
  ('values -> null_value','values',1,'p_values','parser_analyzer.py',148),
  ('atrb -> ID','atrb',1,'p_atrb','parser_analyzer.py',154),
  ('atrb -> ID COLON data_type','atrb',3,'p_atrb','parser_analyzer.py',155),
  ('atrb_list -> atrb SEMICOLON','atrb_list',2,'p_atrb_list','parser_analyzer.py',164),
  ('atrb_list -> atrb_list atrb SEMICOLON','atrb_list',3,'p_atrb_list','parser_analyzer.py',165),
  ('atrb_expr -> ID COLON expr','atrb_expr',3,'p_atrb_expr','parser_analyzer.py',176),
  ('atrb_expr -> ID','atrb_expr',1,'p_atrb_expr','parser_analyzer.py',177),
  ('atrb_expr_list -> atrb_expr','atrb_expr_list',1,'p_atrb_expr_list','parser_analyzer.py',187),
  ('atrb_expr_list -> atrb_expr_list COMMA atrb_expr comma_prod','atrb_expr_list',4,'p_atrb_expr_list','parser_analyzer.py',188),
  ('comma_prod -> COMMA','comma_prod',1,'p_comma_prod','parser_analyzer.py',198),
  ('comma_prod -> <empty>','comma_prod',0,'p_comma_prod','parser_analyzer.py',199),
  ('array_expr -> L_BRACKET expr_list R_BRACKET','array_expr',3,'p_array_expr','parser_analyzer.py',205),
  ('array_expr -> L_BRACKET R_BRACKET','array_expr',2,'p_array_expr','parser_analyzer.py',206),
  ('interface_stmt -> INTERFACE ID L_BRACE atrb_list R_BRACE','interface_stmt',5,'p_interface_stmt','parser_analyzer.py',214),
  ('assign_interface_list -> ID','assign_interface_list',1,'p_assign_interface_list','parser_analyzer.py',219),
  ('assign_interface_list -> assign_interface_list DOT ID','assign_interface_list',3,'p_assign_interface_list','parser_analyzer.py',220),
  ('interface_assignment -> ID DOT assign_interface_list ASSIGN expr','interface_assignment',5,'p_interface_assignment','parser_analyzer.py',230),
  ('interface_assignment -> ID DOT assign_interface_list INCREMENT','interface_assignment',4,'p_interface_assignment','parser_analyzer.py',231),
  ('interface_assignment -> ID DOT assign_interface_list DECREMENT','interface_assignment',4,'p_interface_assignment','parser_analyzer.py',232),
  ('interface_atrb_value -> ID DOT assign_interface_list','interface_atrb_value',3,'p_interface_atrb_value','parser_analyzer.py',241),
  ('interface_expr -> L_BRACE atrb_expr_list R_BRACE','interface_expr',3,'p_interface_expr','parser_analyzer.py',246),
  ('interface_expr -> L_BRACE R_BRACE','interface_expr',2,'p_interface_expr','parser_analyzer.py',247),
  ('expr -> L_PAREN expr R_PAREN','expr',3,'p_expr','parser_analyzer.py',271),
  ('expr -> arith_expr','expr',1,'p_expr','parser_analyzer.py',272),
  ('expr -> logic_expr','expr',1,'p_expr','parser_analyzer.py',273),
  ('expr -> comp_expr','expr',1,'p_expr','parser_analyzer.py',274),
  ('expr -> unary_expr','expr',1,'p_expr','parser_analyzer.py',275),
  ('expr -> values','expr',1,'p_expr','parser_analyzer.py',276),
  ('expr -> func_call','expr',1,'p_expr','parser_analyzer.py',277),
  ('expr -> array_call','expr',1,'p_expr','parser_analyzer.py',278),
  ('expr -> interface_expr','expr',1,'p_expr','parser_analyzer.py',279),
  ('expr -> assign_expr','expr',1,'p_expr','parser_analyzer.py',280),
  ('expr -> array_expr','expr',1,'p_expr','parser_analyzer.py',281),
  ('expr -> concat','expr',1,'p_expr','parser_analyzer.py',282),
  ('expr -> interface_assignment','expr',1,'p_expr','parser_analyzer.py',283),
  ('expr -> interface_atrb_value','expr',1,'p_expr','parser_analyzer.py',284),
  ('arith_expr -> expr PLUS expr','arith_expr',3,'p_arith_expr','parser_analyzer.py',290),
  ('arith_expr -> expr MINUS expr','arith_expr',3,'p_arith_expr','parser_analyzer.py',291),
  ('arith_expr -> expr MULT expr','arith_expr',3,'p_arith_expr','parser_analyzer.py',292),
  ('arith_expr -> expr DIV expr','arith_expr',3,'p_arith_expr','parser_analyzer.py',293),
  ('arith_expr -> expr POW expr','arith_expr',3,'p_arith_expr','parser_analyzer.py',294),
  ('arith_expr -> expr MOD expr','arith_expr',3,'p_arith_expr','parser_analyzer.py',295),
  ('logic_expr -> expr AND expr','logic_expr',3,'p_logic_expr','parser_analyzer.py',301),
  ('logic_expr -> expr OR expr','logic_expr',3,'p_logic_expr','parser_analyzer.py',302),
  ('comp_expr -> expr GREATHER_THAN expr','comp_expr',3,'p_comp_expr','parser_analyzer.py',308),
  ('comp_expr -> expr LESS_THAN expr','comp_expr',3,'p_comp_expr','parser_analyzer.py',309),
  ('comp_expr -> expr EQUAL expr','comp_expr',3,'p_comp_expr','parser_analyzer.py',310),
  ('comp_expr -> expr UNEQUAL expr','comp_expr',3,'p_comp_expr','parser_analyzer.py',311),
  ('comp_expr -> expr GREATHER_THAN_OR_EQUAL expr','comp_expr',3,'p_comp_expr','parser_analyzer.py',312),
  ('comp_expr -> expr LESS_THAN_OR_EQUAL expr','comp_expr',3,'p_comp_expr','parser_analyzer.py',313),
  ('unary_expr -> NOT expr','unary_expr',2,'p_unary_expr','parser_analyzer.py',319),
  ('unary_expr -> MINUS expr','unary_expr',2,'p_unary_expr','parser_analyzer.py',320),
  ('expr_list -> expr','expr_list',1,'p_expr_list','parser_analyzer.py',326),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','parser_analyzer.py',327),
  ('stmt -> var_declaration','stmt',1,'p_stmt','parser_analyzer.py',337),
  ('stmt -> func_declaration','stmt',1,'p_stmt','parser_analyzer.py',338),
  ('stmt -> func_call','stmt',1,'p_stmt','parser_analyzer.py',339),
  ('stmt -> assign_expr','stmt',1,'p_stmt','parser_analyzer.py',340),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser_analyzer.py',341),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser_analyzer.py',342),
  ('stmt -> for_stmt','stmt',1,'p_stmt','parser_analyzer.py',343),
  ('stmt -> for_of_stmt','stmt',1,'p_stmt','parser_analyzer.py',344),
  ('stmt -> print_stmt','stmt',1,'p_stmt','parser_analyzer.py',345),
  ('stmt -> interface_stmt','stmt',1,'p_stmt','parser_analyzer.py',346),
  ('stmt -> return_stmt','stmt',1,'p_stmt','parser_analyzer.py',347),
  ('stmt -> break_stmt','stmt',1,'p_stmt','parser_analyzer.py',348),
  ('stmt -> continue_stmt','stmt',1,'p_stmt','parser_analyzer.py',349),
  ('stmt -> interface_assignment','stmt',1,'p_stmt','parser_analyzer.py',350),
  ('stmt -> push','stmt',1,'p_stmt','parser_analyzer.py',351),
  ('stmt -> pop','stmt',1,'p_stmt','parser_analyzer.py',352),
  ('untyped_var_declaration -> LET ID','untyped_var_declaration',2,'p_untyped_var_declaration','parser_analyzer.py',358),
  ('untyped_var_declaration -> LET ID ASSIGN expr','untyped_var_declaration',4,'p_untyped_var_declaration','parser_analyzer.py',359),
  ('typed_var_declaration -> LET ID COLON data_type','typed_var_declaration',4,'p_typed_var_declaration','parser_analyzer.py',368),
  ('typed_var_declaration -> LET ID COLON data_type ASSIGN expr','typed_var_declaration',6,'p_typed_var_declaration','parser_analyzer.py',369),
  ('typed_var_declaration -> LET ID COLON','typed_var_declaration',3,'p_typed_var_declaration','parser_analyzer.py',370),
  ('var_declaration -> untyped_var_declaration','var_declaration',1,'p_var_declaration','parser_analyzer.py',379),
  ('var_declaration -> typed_var_declaration','var_declaration',1,'p_var_declaration','parser_analyzer.py',380),
  ('param -> ID','param',1,'p_param','parser_analyzer.py',386),
  ('param -> ID COLON data_type','param',3,'p_param','parser_analyzer.py',387),
  ('param -> LET ID','param',2,'p_param','parser_analyzer.py',388),
  ('param -> LET ID COLON data_type','param',4,'p_param','parser_analyzer.py',389),
  ('param_list -> param','param_list',1,'p_param_list','parser_analyzer.py',402),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser_analyzer.py',403),
  ('func_declaration -> FUNCTION ID L_PAREN R_PAREN L_BRACE stmt_list R_BRACE','func_declaration',7,'p_func_declaration','parser_analyzer.py',414),
  ('func_declaration -> FUNCTION ID L_PAREN param_list R_PAREN L_BRACE stmt_list R_BRACE','func_declaration',8,'p_func_declaration','parser_analyzer.py',415),
  ('func_declaration -> FUNCTION ID L_PAREN R_PAREN COLON data_type L_BRACE stmt_list R_BRACE','func_declaration',9,'p_func_declaration','parser_analyzer.py',416),
  ('func_declaration -> FUNCTION ID L_PAREN param_list R_PAREN COLON data_type L_BRACE stmt_list R_BRACE','func_declaration',10,'p_func_declaration','parser_analyzer.py',417),
  ('func_declaration -> FUNCTION ID L_PAREN R_PAREN COLON VOID L_BRACE stmt_list R_BRACE','func_declaration',9,'p_func_declaration','parser_analyzer.py',418),
  ('func_declaration -> FUNCTION ID L_PAREN param_list R_PAREN COLON VOID L_BRACE stmt_list R_BRACE','func_declaration',10,'p_func_declaration','parser_analyzer.py',419),
  ('param_call -> expr','param_call',1,'p_param_call','parser_analyzer.py',431),
  ('params_call -> param_call','params_call',1,'p_params_call','parser_analyzer.py',436),
  ('params_call -> params_call COMMA param_call','params_call',3,'p_params_call','parser_analyzer.py',437),
  ('func_call -> ID L_PAREN R_PAREN','func_call',3,'p_func_call','parser_analyzer.py',447),
  ('func_call -> ID L_PAREN params_call R_PAREN','func_call',4,'p_func_call','parser_analyzer.py',448),
  ('locate -> L_BRACKET expr R_BRACKET','locate',3,'p_locate','parser_analyzer.py',458),
  ('locate -> locate L_BRACKET expr R_BRACKET','locate',4,'p_locate','parser_analyzer.py',459),
  ('array_call -> ID locate','array_call',2,'p_array_call','parser_analyzer.py',468),
  ('assign_array -> ID locate ASSIGN expr','assign_array',4,'p_assing_array','parser_analyzer.py',473),
  ('assign_array -> ID locate INCREMENT','assign_array',3,'p_assing_array','parser_analyzer.py',474),
  ('assign_array -> ID locate DECREMENT','assign_array',3,'p_assing_array','parser_analyzer.py',475),
  ('assign_expr -> ID ASSIGN expr','assign_expr',3,'p_assign_expr','parser_analyzer.py',486),
  ('assign_expr -> ID INCREMENT','assign_expr',2,'p_assign_expr','parser_analyzer.py',487),
  ('assign_expr -> ID DECREMENT','assign_expr',2,'p_assign_expr','parser_analyzer.py',488),
  ('assign_expr -> assign_array','assign_expr',1,'p_assign_expr','parser_analyzer.py',489),
  ('if_stmt -> IF conditional_if','if_stmt',2,'p_if_stmt','parser_analyzer.py',501),
  ('conditional_if -> L_PAREN expr R_PAREN L_BRACE stmt_list R_BRACE','conditional_if',6,'p_conditional_if','parser_analyzer.py',507),
  ('conditional_if -> L_PAREN expr R_PAREN L_BRACE stmt_list R_BRACE ELSE L_BRACE stmt_list R_BRACE','conditional_if',10,'p_conditional_if_else','parser_analyzer.py',513),
  ('conditional_if -> L_PAREN expr R_PAREN L_BRACE stmt_list R_BRACE ELSE IF conditional_if','conditional_if',9,'p_conditional_if_else_if','parser_analyzer.py',519),
  ('while_stmt -> WHILE L_PAREN expr R_PAREN L_BRACE stmt_list R_BRACE','while_stmt',7,'p_while_stmt','parser_analyzer.py',525),
  ('for_stmt -> FOR for_stmt_loop','for_stmt',2,'p_for_stmt','parser_analyzer.py',532),
  ('for_stmt_loop -> L_PAREN expr SEMICOLON expr SEMICOLON assign_expr R_PAREN L_BRACE stmt_list R_BRACE','for_stmt_loop',10,'p_for_stmt_loop','parser_analyzer.py',538),
  ('for_stmt_loop -> L_PAREN var_declaration SEMICOLON expr SEMICOLON assign_expr R_PAREN L_BRACE stmt_list R_BRACE','for_stmt_loop',10,'p_for_stmt_loop_var','parser_analyzer.py',544),
  ('for_of_stmt -> FOR L_PAREN var_declaration OF expr R_PAREN L_BRACE stmt_list R_BRACE','for_of_stmt',9,'p_for_of_stmt','parser_analyzer.py',550),
  ('for_of_stmt -> FOR L_PAREN expr OF expr R_PAREN L_BRACE stmt_list R_BRACE','for_of_stmt',9,'p_for_of_stmt','parser_analyzer.py',551),
  ('print_stmt -> CONSOLE DOT LOG L_PAREN expr_list R_PAREN','print_stmt',6,'p_print_stmt','parser_analyzer.py',559),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','parser_analyzer.py',565),
  ('return_stmt -> RETURN','return_stmt',1,'p_return_stmt','parser_analyzer.py',566),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser_analyzer.py',574),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser_analyzer.py',578),
  ('concat -> CONCAT L_PAREN expr_list R_PAREN','concat',4,'p_concat','parser_analyzer.py',625),
  ('push -> ID DOT PUSH L_PAREN expr R_PAREN','push',6,'p_push','parser_analyzer.py',629),
  ('pop -> ID DOT POP L_PAREN R_PAREN','pop',5,'p_pop','parser_analyzer.py',633),
]
